"""Utility functions for nonce generation and resolution.

These helpers use Redis to store and retrieve one‑time values (nonces).
Nonces are short random strings used to correlate actions between the
AdsBot and LoginBot.  Each nonce maps to a Telegram chat ID and expires
after a fixed interval.  Storing the mapping in Redis allows the two
services to share state without maintaining an in‑memory cache.
"""

import secrets
from redis import Redis
from .settings import settings

# Establish a Redis client using the URL from settings.  ``decode_responses=True``
# ensures that values are returned as Python strings rather than bytes.
r = Redis.from_url(settings.redis_url, decode_responses=True)

# How long a nonce should remain valid (in seconds).  The LoginBot must
# present the nonce to the API within this time or the bind will fail.
NONCE_TTL = 600  # 10 minutes

def new_nonce(bot_chat_id: int) -> str:
    """Generate a new nonce and store it in Redis.

    Args:
        bot_chat_id: The AdsBot chat ID to associate with the nonce.

    Returns:
        A URL‑safe random string which can be used as a nonce in deep
        links.  The mapping from nonce to ``bot_chat_id`` will expire
        automatically after ``NONCE_TTL`` seconds.
    """
    n = secrets.token_urlsafe(16)
    r.setex(f"nonce:{n}", NONCE_TTL, str(bot_chat_id))
    return n

def resolve_nonce(nonce: str) -> int | None:
    """Look up a nonce in Redis and return the associated chat ID.

    Args:
        nonce: The random string previously generated by ``new_nonce``.

    Returns:
        The AdsBot chat ID if the nonce exists and has not expired,
        otherwise ``None``.
    """
    val = r.get(f"nonce:{nonce}")
    return int(val) if val else None

def clear_nonce(nonce: str) -> None:
    """Remove a nonce from Redis.

    Args:
        nonce: The key to remove.
    """
    r.delete(f"nonce:{nonce}")
